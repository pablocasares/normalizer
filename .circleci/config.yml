preconfiguration: &preconfiguration
  working_directory: /normalizer
  docker:
    - image: gcr.io/wizzie-registry/data-builder:stable
  environment:
    - APP_NAME: "normalizer"

image: &cached
    paths:
      - normalizer.tar
workspace: &workspace
    at: /normalizer/caches



version: 2
jobs:
  build:
    <<: *preconfiguration
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - service-cache-v1-{{ checksum "service/pom.xml" }}
      - restore_cache:
          keys:
            - model-cache-v1-{{ checksum "model/pom.xml" }}
      - restore_cache:
          keys:
            - maven-cache-v2-{{ checksum "model/pom.xml" }}-{{ checksum "service/pom.xml" }}
      - run:
          name: Build application Docker image
          command: |
            mvn package -P docker
            mkdir -p caches
            docker save -o caches/${APP_NAME}.tar ${APP_NAME}
      - save_cache:
          key: service-cache-v1-{{ checksum "service/pom.xml" }}
          paths:
            - service/target/dependencies
      - save_cache:
          key: model-cache-v1-{{ checksum "model/pom.xml" }}
          paths:
            - model/target/dependencies
      - save_cache:
          key: maven-cache-v2-{{ checksum "model/pom.xml" }}-{{ checksum "service/pom.xml" }}
          paths:
            - ~/.m2
      - persist_to_workspace:
          root: caches
          <<: *cached
  deploy:
    <<: *preconfiguration
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - setup_remote_docker
      - deploy:
          name: Tag master and deploy
          command: |
            set +o pipefail
            docker load -i /${APP_NAME}/caches/${APP_NAME}.tar | true
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            docker login -u _json_key --password-stdin https://gcr.io < ${HOME}/gcloud-service-key.json
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project $GCLOUD_PROJECT
            gcloud auth configure-docker --quiet
            docker tag ${APP_NAME}:latest wizzieio/${APP_NAME}:latest
            docker tag ${APP_NAME}:latest gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:latest
            docker push gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:latest
            docker push wizzieio/${APP_NAME}:latest

  tagged-deploy:
    <<: *preconfiguration
    steps:
      - checkout
      - attach_workspace:
          <<: *workspace
      - setup_remote_docker
      - deploy:
          name: Tag with latest and git tag and deploy both
          command: |
            set +o pipefail
            docker load -i /${APP_NAME}/caches/${APP_NAME}.tar | true
            echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
            docker login -u _json_key --password-stdin https://gcr.io < ${HOME}/gcloud-service-key.json
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud config set project $GCLOUD_PROJECT
            gcloud auth configure-docker --quiet
            docker tag ${APP_NAME}:latest gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:stable
            docker tag ${APP_NAME}:latest wizzieio/${APP_NAME}:stable
            docker push gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:stable
            docker push wizzieio/${APP_NAME}:stable
            CIRCLETAG="$(echo $CIRCLE_TAG | sed 's/normalizer-//g')"
            gcloud container images add-tag gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:stable gcr.io/${GCLOUD_PROJECT}/${APP_NAME}:${CIRCLETAG}
            docker tag ${APP_NAME}:latest wizzieio/${APP_NAME}:${CIRCLETAG}
            docker push wizzieio/${APP_NAME}:${CIRCLETAG}
workflows:
  version: 2
  build-n-deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
      - tagged-deploy:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
